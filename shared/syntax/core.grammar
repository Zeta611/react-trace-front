@precedence {
  rarrow,
  in,
  semi @right,
  eff,
  then,
  else,
  assign,
  or @right,
  and @right,
  eq @left,
  plus @left,
  times @left,
  unary
}

@top Prog { compList }

@skip { ws | LineComment }

@tokens {
  ws { @whitespace+ }
  LineComment { "#" ![\n]* }
  idChar { @asciiLetter | "_" }
  Id { idChar (idChar | @digit | "'")* }
  Unit { "()" }
  Int { @digit+ }
  String { '"' (![\\\n"] | "\\" _)* '"'? }
}

kw<term> { @specialize[@name={term}]<Id, term> }

compList[@isGroup=CompList] {
  Expr { expr } |
  Comp { compExpr ";;" compList }
}

compExpr[@isGroup=CompExpr] {
  Comp { kw<"let"> var var "=" expr }
}

expr {
  apply |
  Fun { kw<"fun"> var !rarrow "->" expr } |
  Let { kw<"let"> var "=" expr !in kw<"in"> expr } |
  Stt { kw<"let"> "(" var "," var ")" "=" kw<"useState"> expr !in kw<"in"> expr } |
  Eff { !eff kw<"useEffect"> expr } |
  View { kw<"view"> "[" separatedNonemptyList<expr> "]" } |
  Cond { kw<"if"> expr !then kw<"then"> expr (!else kw<"else"> expr)? } |
  Seq { expr !semi ";" expr } |
  Uop { !unary uop expr } |
  Bop {
    expr !eq ("=" | "<" | ">" | "<=" | ">=") expr |
    expr !and "&&" expr |
    expr !or "||" expr |
    expr !plus ("+" | "-") expr |
    expr !times "*" expr
  }
}

uop { kw<"not"> | "+" | "-" }

separatedNonemptyList<content> {
  content ("," content)*
}

apply[@isGroup=Apply] {
  atom |
  App { apply atom }
}

atom[@isGroup=Atom] {
  Unit |
  @specialize[@name=Bool]<Id, "true" | "false"> |
  Int |
  String |
  ParenExpr { "(" expr ")" } |
  var
}

var[@isGroup=Var] { Id }
