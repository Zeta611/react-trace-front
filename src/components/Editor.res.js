// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Js_exn from "rescript/lib/es6/js_exn.js";
import * as Slider from "./shadcn-ui/Slider.res.js";
import * as Checkbox from "./shadcn-ui/Checkbox.res.js";
import * as ReacttRace from "../shared/react-trace/ReacttRace.res.js";
import * as HookLabelPlugin from "../shared/plugin/HookLabelPlugin.res.js";
import * as JsxRuntime from "react/jsx-runtime";
import * as Caml_js_exceptions from "rescript/lib/es6/caml_js_exceptions.js";
import ReactCodemirror from "@uiw/react-codemirror";
import * as CodemirrorVim from "@replit/codemirror-vim";
import * as LangJavascript from "@codemirror/lang-javascript";
import * as LanguageJs from "../shared/syntax/language.js";
import * as CodemirrorThemeTokyoNightDay from "@uiw/codemirror-theme-tokyo-night-day";

var sample = "\nlet C x =\n  let (s, setS) = useState x in\n  if s = 42 then\n    setS (fun s -> s + 1);\n  view [()]\n;;\nlet D _ =\n  let (s, setS) = useState true in\n  useEffect (setS (fun _ -> false));\n  view [C 42]\n;;\nview [D (), 0]\n".trim();

var javascript = LangJavascript.javascript();

var vim = CodemirrorVim.vim();

var core = LanguageJs.core;

var coreLang = core();

function reacttRace(fuel, value) {
  try {
    return ReacttRace.run(fuel, value);
  }
  catch (raw_e){
    var e = Caml_js_exceptions.internalToOCamlException(raw_e);
    if (e.RE_EXN_ID === Js_exn.$$Error) {
      console.error(e._1);
      return {
              error: "Runtime error"
            };
    }
    throw e;
  }
}

function Editor(props) {
  var match = React.useState(function () {
        return sample;
      });
  var setCode = match[1];
  var code = match[0];
  var match$1 = React.useState(function () {
        return reacttRace(0, code);
      });
  var setRecording = match$1[1];
  var recording = match$1[0];
  var match$2 = React.useState(function () {
        return 0;
      });
  var setCurrentStep = match$2[1];
  var currentStep = match$2[0];
  var checkpoints = recording.checkpoints;
  var match$3;
  if (checkpoints !== undefined) {
    match$3 = [
      checkpoints.slice(0, currentStep).join("\n"),
      checkpoints.length
    ];
  } else {
    var error = recording.error;
    if (error !== undefined) {
      match$3 = [
        error,
        0
      ];
    } else {
      throw {
            RE_EXN_ID: "Assert_failure",
            _1: [
              "Editor.res",
              47,
              9
            ],
            Error: new Error()
          };
    }
  }
  var steps = match$3[1];
  var onChange = function (value) {
    setCode(function (param) {
          return value;
        });
    setCurrentStep(function (param) {
          return steps;
        });
    setRecording(function (param) {
          return reacttRace(0, value);
        });
  };
  var match$4 = React.useState(function () {
        return false;
      });
  var setJSMode = match$4[1];
  var jsMode = match$4[0];
  var match$5 = React.useState(function () {
        return false;
      });
  var setVimMode = match$5[1];
  var vimMode = match$5[0];
  var extensions = [].concat(vimMode ? [vim] : [], jsMode ? [javascript] : [coreLang], [
        CodemirrorThemeTokyoNightDay.tokyoNightDay,
        HookLabelPlugin.plugin
      ]);
  return JsxRuntime.jsxs("div", {
              children: [
                JsxRuntime.jsxs("div", {
                      children: [
                        JsxRuntime.jsxs("div", {
                              children: [
                                JsxRuntime.jsx(Checkbox.make, {
                                      id: "check-vim-mode",
                                      checked: vimMode,
                                      onCheckedChange: (function (checked) {
                                          setVimMode(function (param) {
                                                return checked;
                                              });
                                        })
                                    }),
                                JsxRuntime.jsx("label", {
                                      children: "Vim Keymap",
                                      className: "leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70",
                                      htmlFor: "check-vim-mode"
                                    })
                              ],
                              className: "flex space-x-2"
                            }),
                        JsxRuntime.jsxs("div", {
                              children: [
                                JsxRuntime.jsx(Checkbox.make, {
                                      id: "check-js-mode",
                                      checked: jsMode,
                                      onCheckedChange: (function (checked) {
                                          setJSMode(function (param) {
                                                return checked;
                                              });
                                        })
                                    }),
                                JsxRuntime.jsx("label", {
                                      children: "JS Syntax",
                                      className: "leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70",
                                      htmlFor: "check-js-mode"
                                    })
                              ],
                              className: "flex space-x-2"
                            })
                      ],
                      className: "flex place-self-end items-center space-x-4 text-sm font-medium"
                    }),
                JsxRuntime.jsx(ReactCodemirror, {
                      value: code,
                      onChange: onChange,
                      extensions: extensions,
                      className: "text-base font-mono"
                    }),
                JsxRuntime.jsx(Slider.make, {
                      value: [currentStep],
                      onValueChange: (function (vs) {
                          setCurrentStep(function (param) {
                                return vs[0];
                              });
                        }),
                      max: steps,
                      step: 1
                    }),
                JsxRuntime.jsx("div", {
                      children: match$3[0],
                      className: "text-lg font-sans text-gray-800 whitespace-pre-wrap"
                    })
              ],
              className: "flex flex-col gap-4"
            });
}

var make = Editor;

export {
  sample ,
  javascript ,
  vim ,
  core ,
  coreLang ,
  reacttRace ,
  make ,
}
/* sample Not a pure module */
