'use client';
// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Js_exn from "rescript/lib/es6/js_exn.js";
import * as Core__Option from "@rescript/core/src/Core__Option.res.js";
import * as ReacttRaceWrapper from "../shared/ReacttRaceWrapper.res.js";
import * as JsxRuntime from "react/jsx-runtime";
import * as Caml_js_exceptions from "rescript/lib/es6/caml_js_exceptions.js";
import ReactCodemirror from "@uiw/react-codemirror";
import * as LangJavascript from "@codemirror/lang-javascript";
import * as CodemirrorThemeTokyoNightDay from "@uiw/codemirror-theme-tokyo-night-day";

var sample = "\nlet C x =\n  let (s, setS) = useState x in\n  if s = 42 then\n    setS (fun s -> s + 1);\n  view [()]\n;;\nlet D _ =\n  let (s, setS) = useState true in\n  useEffect (setS (fun _ -> false));\n  view [C 42]\n;;\nview [D (), 0]\n".trim();

var javascript = Curry._1(LangJavascript.javascript, undefined);

var fetchedReacttRace = {
  contents: undefined
};

function handleExn(run) {
  return function (fuel, value) {
    try {
      return run(fuel, value);
    }
    catch (raw_e){
      var e = Caml_js_exceptions.internalToOCamlException(raw_e);
      if (e.RE_EXN_ID === Js_exn.$$Error) {
        console.error(e._1);
        return "Runtime error";
      }
      throw e;
    }
  };
}

function reacttRace(fuel, value, setRecording) {
  var run = fetchedReacttRace.contents;
  if (run !== undefined) {
    return setRecording(function (param) {
                return run(fuel, value);
              });
  } else {
    ((async function () {
            var run = handleExn(await ReacttRaceWrapper.$$fetch());
            fetchedReacttRace.contents = run;
            return setRecording(function (param) {
                        return run(fuel, value);
                      });
          })());
    return ;
  }
}

function Editor(props) {
  var match = React.useState(function () {
        return sample;
      });
  var setValue = match[1];
  var value = match[0];
  var match$1 = React.useState(function () {
        return Core__Option.map(fetchedReacttRace.contents, (function (run) {
                      return run(0, value);
                    }));
      });
  var setRecording = match$1[1];
  var recording = match$1[0];
  React.useEffect((function () {
          if (Core__Option.isNone(recording)) {
            reacttRace(0, value, setRecording);
          }
          
        }), []);
  var onChange = function (value) {
    setValue(function (param) {
          return value;
        });
    reacttRace(0, value, setRecording);
  };
  return JsxRuntime.jsxs("div", {
              children: [
                JsxRuntime.jsx(ReactCodemirror, {
                      value: value,
                      mode: "ocaml",
                      height: "300px",
                      onChange: onChange,
                      extensions: [
                        CodemirrorThemeTokyoNightDay.tokyoNightDay,
                        javascript
                      ],
                      className: "text-base font-mono"
                    }),
                JsxRuntime.jsx("div", {
                      children: Core__Option.getOr(recording, "Loading..."),
                      className: "text-lg font-sans text-gray-800 whitespace-pre-wrap"
                    })
              ],
              className: "flex flex-col gap-4"
            });
}

var make = Editor;

export {
  sample ,
  javascript ,
  fetchedReacttRace ,
  reacttRace ,
  make ,
}
/* sample Not a pure module */
